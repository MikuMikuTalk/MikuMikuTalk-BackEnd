syntax = "v1"

info (
	title:   "用户API"
	desc:    "用户API 文档"
	author:  "MeowRain"
	email:   "meowrian@126.com"
	version: "1.0.0"
)

type UserInfoRequest {}

type VerificationQuestion {
	Problem1 *string `json:"problem1,optional" user_conf:"problem1"`
	Problem2 *string `json:"problem2,optional" user_conf:"problem2"`
	Problem3 *string `json:"problem3,optional" user_conf:"problem3"`
	Answer1  *string `json:"answer1,optional" user_conf:"answer1"`
	Answer2  *string `json:"answer2,optional" user_conf:"answer2"`
	Answer3  *string `json:"answer3,optional" user_conf:"answer3"`
}

type UserInfoResponse {
	UserID               uint                  `json:"userID"`
	Nickname             string                `json:"nickname"`
	Abstract             string                `json:"abstract"`
	Avatar               string                `json:"avatar"`
	RecallMessage        *string               `json:"recallMessage"`
	FriendOnline         bool                  `json:"friendOnline"`
	EnableSound          bool                  `json:"enableSound"`
	SecureLink           bool                  `json:"secureLink"`
	SavePwd              bool                  `json:"savePwd"`
	SearchUser           int8                  `json:"searchUser"`
	Verification         int8                  `json:"verification"`
	VerificationQuestion *VerificationQuestion `json:"verificationQuestion"`
}

type UserInfoUpdateRequest {
	Nickname             *string               `json:"nickname,optional" user:"nickname"`
	Abstract             *string               `json:"abstract,optional" user:"abstract"`
	Avatar               *string               `json:"avatar,optional" user:"avatar"`
	RecallMessage        *string               `json:"recallMessage,optional" user_conf:"recall_message"`
	FriendOnline         *bool                 `json:"friendOnline,optional" user_conf:"friend_online"`
	EnableSound          *bool                 `json:"enableSound,optional" user_conf:"enable_sound"`
	SecureLink           *bool                 `json:"secureLink,optional" user_conf:"secure_link"`
	SavePwd              *bool                 `json:"savePwd,optional" user_conf:"save_pwd"`
	SearchUser           *int8                 `json:"searchUser,optional" user_conf:"search_user"`
	Verification         *int8                 `json:"verification,optional" user_conf:"verification"`
	VerificationQuestion *VerificationQuestion `json:"verificationQuestion,optional" user_conf:"verification_question"`
}

type UserInfoUpdateResponse {}

type FriendInfoRequest {
	FriendName string `form:"friend_name"`
}

type FriendInfoResponse {
	FriendID uint   `json:"friendID"`
	Nickname string `json:"nickname"`
	Abstract string `json:"abstract"`
	Avatar   string `json:"avatar"`
	Notice   string `json:"notice"`
	IsOnline bool   `json:"isOnline"` // 是否在线
}

type FriendListRequest {
	Role  int8 `header:"Role"`
	Page  int  `form:"page,optional"`
	Limit int  `form:"limit,optional"`
}

type FriendListResponse {
	List  []FriendInfoResponse `json:"list"`
	Count int64                `json:"count"`
}

type FriendNoticeUpdateRequest {
	FriendID uint   `json:"friendID"`
	Notice   string `json:"notice"` // 备注
}

type FriendNoticeUpdateResponse {}

type SearchRequest {
	Key    string `form:"key"` //用户id和昵称
	Online bool   `form:"online"` //搜索在线得用户
	Page   int    `form:"page,optional"`
	Limit  int    `form:"limit,optional"`
}

type SearchInfo {
	NickName string `json:"nickname"`
	Abstract string `json:"abstract"`
	Avatar   string `json:"avatar"`
	IsFriend bool   `json:"isFriend"` //是否为好友
}

type SearchResponse {
	List  []SearchInfo `json:"list"`
	Count int64        `json:"count"`
}

type UserValidRequest {
	FriendName string `json:"friend_name"`
}

type UserValidResponse {
	Verification         int8                 `json:"verification"` // 好友验证
	VerificationQuestion VerificationQuestion `json:"verificationQuestion"` // 问题和答案，但是答案不要返回
}

type AddFriendRequest {
	FriendName           string                `json:"friend_name"`
	Verify               string                `json:"verify,optional"` // 验证消息
	VerificationQuestion *VerificationQuestion `json:"verificationQuestion,optional"` // 问题和答案
}

type AddFriendResponse {}

type FriendValidRequest {
	Page  int `form:"page,optional"`
	Limit int `form:"limit,optional"`
}

type FriendValidInfo {
	UserID               uint                  `json:"userID"`
	Nickname             string                `json:"nickname"`
	Avatar               string                `json:"avatar"`
	AdditionalMessages   string                `json:"additionalMessages"` // 附加消息
	VerificationQuestion *VerificationQuestion `json:"verificationQuestion"` // 验证问题  为3和4的时候需要
	Status               int8                  `json:"status"` // 状态 0 未操作 1 同意 2 拒绝 3 忽略 4 删除
	Verification         int8                  `json:"verification"` // 好友验证
	ID                   uint                  `json:"id"` // 验证记录的id
	Flag                 string                `json:"flag"` // send 我是发起方  rev 我是接收方
	CreatedAt            string                `json:"createdAt"` // 验证的时间
}

type FriendValidResponse {
	List  []FriendValidInfo `json:"list"` // 好友验证信息表
	Count int64             `json:"count"` // 数量
}

type FriendValidStatusRequest {
	VerifyID uint `json:"verifyId"` //验证消息的id-> 在表中能看到
	Status   int8 `json:"status"` // 状态
}

type FriendValidStatusResponse {}

type FriendDeleteRequest {
	FriendName string `json:"friend_name"`
}

type FriendDeleteResponse {}

@server (
	prefix: /api/user
)
service users {
	@doc (
		summary: "用户信息获取接口"
	)
	@handler UserInfo
	get /info (UserInfoRequest) returns (UserInfoResponse)

	@doc (
		summary: "用户信息更新接口"
	)
	@handler UserInfoUpdate
	put /info (UserInfoUpdateRequest) returns (UserInfoUpdateResponse)

	@doc (
		summary: "好友信息接口"
	)
	@handler FriendInfo
	get /friend_info (FriendInfoRequest) returns (FriendInfoResponse)

	@doc (
		summary: "好友列表获取"
	)
	@handler FriendList
	get /friend_list (FriendListRequest) returns (FriendListResponse)

	@doc (
		summary: "好友备注修改"
	)
	@handler FriendNoticeUpdate
	put /friends (FriendNoticeUpdateRequest) returns (FriendNoticeUpdateResponse) // 修改好友备注

	@doc (
		summary:     "好友删除接口"
		description: "删除好友操作"
	)
	@handler FriendDelete
	delete /friends (FriendDeleteRequest) returns (FriendDeleteResponse)

	@doc (
		summary: "好友搜索接口"
	)
	@handler FriendSearch
	get /search (SearchRequest) returns (SearchResponse)

	@doc (
		summary: "好友验证接口"
	)
	@handler UserValid
	post /valid (UserValidRequest) returns (UserValidResponse)

	@doc (
		summary:     "好友添加接口"
		description: "向这个接口要加的用户名，就会提取我和这个用户的id到friend_verify_model表（记录用户验证信息的）"
	)
	@handler AddUser
	post /add (AddFriendRequest) returns (AddFriendResponse)

	@doc (
		summary:     "好友验证列表"
		description: "从friend_verify_model表中获取接收或者发送用户为我的user_id的相关信息，可以看到有谁想加我或者我向谁发送了好友请求"
	)
	@handler UserValidList
	get /valid (FriendValidRequest) returns (FriendValidResponse)

	@doc (
		summary:     "好友验证状态操作"
		description: "假如有我和好友B，我按照他的用户名（唯一）找到他的账号并向他发送好友请求验证，这个验证信息会被存储在friend_verify_models表中，这样我能看到我发出了这个好友验证请求，而好友B能看到我向他发送了这个好友请求，这时候好友可以选择同意我的好友请求，或者拒绝我的好友请求，也可以忽略或者删除我的好友请求。如果我的好友请求被拒绝的话，我的客户端也能看到被拒绝的信息，我可以重新想 他发起好友验证请求。如果我的好友请求被B同意的话，就会把我和它的id存储在friend_model表中，表明我和他已经成为好友"
	)
	@handler validStatus
	put /valid_status (FriendValidStatusRequest) returns (FriendValidStatusResponse) // 好友验证状态操作
}

